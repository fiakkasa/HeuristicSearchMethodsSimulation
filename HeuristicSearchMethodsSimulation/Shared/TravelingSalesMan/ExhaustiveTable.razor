<Condition Evaluation="Loading">
	<NotMatch>
		<Condition Evaluation="DisplayExcessRecordsMessage">
			<Match>
				<div class="traveling-salesman-exhaustive-table-container @CssClass">
					<h6 class="text-danger m-0">
						There are too many candidate solutions to exhaustively display on the screen. Please try another search method.
					</h6>
				</div>
			</Match>
			<NotMatch>
				<Condition Evaluation="Collection?.Count > 0">
					<Match>
						<div class="traveling-salesman-exhaustive-table-container overflow-auto row @CssClass">
							<Virtualize Items="@Collection" OverscanCount="10">
								<ItemContent>
									<div class="col-12 col-lg-6 p-1" @key="context.Id">
										<CycleWithDistanceButton TItem="ExhaustiveItem" 
																 Text="@context.Text"
																 DistanceInKilometers="@context.DistanceInKilometers"
																 Selected="@(context.Id == SelectedId)"
																 Disabled="@Disabled"
																 OnSelection="OnSelectionChange(context)" />
									</div>
								</ItemContent>
								<Placeholder>
									<div class="d-flex justify-content-center">
										<div class="spinner-grow text-secondary"></div>
									</div>
								</Placeholder>
							</Virtualize>
						</div>
					</Match>
				</Condition>
			</NotMatch>
		</Condition>
	</NotMatch>
</Condition>


@code {
	[Parameter] public string? CssClass { get; set; }
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public bool Loading { get; set; }
	[Parameter] public List<ExhaustiveItem>? Collection { get; set; }
	[Parameter] public Guid? SelectedId { get; set; }
	[Parameter] public bool DisplayExcessRecordsMessage { get; set; }
	[Parameter] public EventCallback<ExhaustiveItem> OnSelection { get; set; }

	private Func<Task> OnSelectionChange(ExhaustiveItem item) =>
		() => OnSelection.InvokeAsync(item);
}
