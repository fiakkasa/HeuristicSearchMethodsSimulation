@if (Step >= 0)
{
    <div class="traveling-salesman-evolutionary-steps-container @CssClass">
        <div class="steps-text row">
            @if (Step >= 0)
            {
                <div class="col-12 @(Step == 0 ? "text-black" : "text-muted")">
                    Step 0: Establish an appropriate encoding system.
                </div>
            }
            @if (Step >= 1)
            {
                <div class="col-12 @(Step == 1 ? "text-black" : "text-muted")">
                    Step 1: Define usable operators.
                </div>
                @if (Step == 1)
                {
                    <div class="col-12 text-muted">
                        Crossover: preserve segment from one parent and fill the missing bits based on their appearing order in the other.
                    </div>
                }
            }
            @if (Step >= 2)
            {
                <div class="col-12 @(Step == 2 || Step == 3 || Step == 4 ? "text-black" : "text-muted")">
                    Step 2: Generate initial population.
                </div>
            }
            @if (Step == 3)
            {
                <div class="col-12 text-black">
                    Elites: sort and choose the fittest solution(s) to be copied unchanged into the next generation directly.
                </div>
            }
            @if (Step == 4)
            {
                <div class="col-12 text-black">
                    Parents: probabilistically choose fit solutions to be transferred into the mating pool.
                </div>
            }
            @if (Step >= 5)
            {
                <div class="col-12 @(Step == 5 ? "text-black" : "text-muted")">
                    Step 3: Breed the new candidate solutions.
                </div>
            }
            @if (Step == 6)
            {
                <div class="col-12 @(Step == 6 ? "text-black" : "text-muted")">
                    Survivors: rank and choose the fittest solutions to complete the next generation.
                </div>
            }
            @if (Step >= 7)
            {
                <div class="col-12 @(Step == 7 ? "text-black" : "text-muted")">
                    Step 4: Construct the next generation.
                </div>
            }
        </div>
        <div class="steps row">
            @if (Step == 0)
            {
                <div class="col-12 mt-1">
                    <div class="d-flex flex-wrap">
                        <Iterations T="int" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal)">
                            <div class="p-1 text-muted">@context</div>
                        </Iterations>
                    </div>
                    @if (CycleComplete == true)
                    {
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-outline-info" disabled="@Disabled" @onclick="() => OnNextStep.InvokeAsync(1)">
                                Next
                            </button>
                        </div>
                    }
                </div>
            }
            else if (Step == 1)
            {
                <div class="col-12 mt-1">
                    <div class="d-flex flex-wrap justify-content-center align-items-center">
                        <div class="p-1">
                            <div class="d-flex flex-wrap">
                                <Iterations T="int" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal)">
                                    <div class="p-1 px-2 bg-success text-white bg-opacity-50 border border-1 border-light">@context</div>
                                </Iterations>
                            </div>
                            <div class="d-flex flex-wrap mt-2">
                                <Iterations T="int" Items="Generations?.Skip(1).FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal)">
                                    <div class="p-1 px-2 bg-success text-white border border-1 border-light">@context</div>
                                </Iterations>
                            </div>
                        </div>
                        <div class="p-1">
                            <div class="d-flex flex-wrap">
                                <Iterations T="(int ordinal, int index)" Items="Offsprings?.FirstOrDefault()?.Nodes.Skip(1).Select((x, i) => (ordinal: x.Ordinal, index: i))">
                                    <div class="p-1 px-2 bg-success text-white border border-1 border-light @Step1OffspringCssClass(context.index, true)">
                                        @context.ordinal
                                    </div>
                                </Iterations>
                            </div>
                            <div class="d-flex flex-wrap mt-2">
                                <Iterations T="(int ordinal, int index)" Items="Offsprings?.Skip(1).FirstOrDefault()?.Nodes.Skip(1).Select((x, i) => (ordinal: x.Ordinal, index: i))">
                                    <div class="p-1 px-2 bg-success text-white border border-1 border-light @Step1OffspringCssClass(context.index, false)">
                                        @context.ordinal
                                    </div>
                                </Iterations>
                            </div>
                        </div>
                    </div>
                    <div class="mt-2">
                        <button type="button" class="btn btn-sm btn-outline-info" disabled="@Disabled" @onclick="() => OnNextStep.InvokeAsync(2)">
                            Next
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public int? Step { get; set; }
    [Parameter] public int? NumberOfBitsOffspring { get; set; }
    [Parameter] public int? NumberOfLocations { get; set; }
    [Parameter] public bool? CycleComplete { get; set; }
    [Parameter] public List<EvolutionaryNodes>? Generations { get; set; }
    [Parameter] public List<EvolutionaryNodes>? Offsprings { get; set; }
    [Parameter] public EventCallback<int?> OnNextStep { get; set; }

    private string Step1OffspringCssClass(int index, bool top) => (Evaluation: index < NumberOfLocations - NumberOfBitsOffspring - 1, Top: top) switch
    {
        { Evaluation: true, Top: true } or { Evaluation: false, Top: false } => "bg-opacity-50",
        _ => string.Empty
    };
}
