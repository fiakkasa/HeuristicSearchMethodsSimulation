@if (Step >= 0)
{
    <div class="traveling-salesman-evolutionary-steps-container @CssClass">
        <div class="steps-text row">
            @if (Step >= 0)
            {
                <div class="col-12 @(Step == 0 ? "text-black" : "text-muted")">
                    Step 0: Establish an appropriate encoding system.
                </div>
            }
            @if (Step >= 1)
            {
                <div class="col-12 @(Step == 1 ? "text-black" : "text-muted")">
                    Step 1: Define usable operators.
                </div>
                @if (Step == 1)
                {
                    <div class="col-12 text-muted">
                        Crossover: preserve segment from one parent and fill the missing bits based on their appearing order in the other.
                    </div>
                }
            }
            @if (Step >= 2)
            {
                <div class="col-12 @(Step == 2 || Step == 3 || Step == 4 ? "text-black" : "text-muted")">
                    Step 2: Generate initial population.
                </div>
            }
            @if (Step == 3)
            {
                <div class="col-12 text-black">
                    Elites: sort and choose the fittest solution(s) to be copied unchanged into the next generation directly.
                </div>
            }
            @if (Step == 4)
            {
                <div class="col-12 text-black">
                    Parents: probabilistically choose fit solutions to be transferred into the mating pool.
                </div>
            }
            @if (Step >= 5)
            {
                <div class="col-12 @(Step == 5 || Step == 6 ? "text-black" : "text-muted")">
                    Step 3: Breed the new candidate solutions.
                </div>
            }
            @if (Step == 6)
            {
                <div class="col-12 @(Step == 6 ? "text-black" : "text-muted")">
                    Survivors: rank and choose the fittest solutions to complete the next generation.
                </div>
            }
            @if (Step >= 7)
            {
                <div class="col-12 @(Step == 7 ? "text-black" : "text-muted")">
                    Step 4: Construct the next generation.
                </div>
            }
            @if (Step == 10)
            {
                <div class="text-black">
                    The algorithm has converged!
                </div>
            }
        </div>
        <div class="steps row">
            <div class="col-12 mt-1">
                @if (Step == 0)
                {
                    <div class="overflow-auto">
                        <div class="d-flex">
                            <Iterations T="int" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal) ?? Enumerable.Empty<int>()">
                                <div class="p-1 text-muted">@context</div>
                            </Iterations>
                        </div>
                    </div>
                }
                else if (Step == 1)
                {
                    <div class="d-flex flex-wrap align-items-center justify-content-center overflow-auto small">
                        <div class="p-1 flex-shrink-0">
                            <div class="d-flex">
                                <Iterations T="int" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal) ?? Enumerable.Empty<int>()">
                                    <div class="p-1 px-2 bg-success text-white bg-opacity-50 border border-1 border-light">@context</div>
                                </Iterations>
                            </div>
                            <div class="d-flex mt-2">
                                <Iterations T="int" Items="Generations?.Skip(1).FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal) ?? Enumerable.Empty<int>()">
                                    <div class="p-1 px-2 bg-success text-white border border-1 border-light">@context</div>
                                </Iterations>
                            </div>
                        </div>
                        <div class="p-1 flex-shrink-0">
                            <div class="d-flex">
                                <Iterations T="(int ordinal, int index)" Items="Offsprings?.FirstOrDefault()?.Nodes.Skip(1).Select((x, i) => (ordinal: x.Ordinal, index: i)) ?? Enumerable.Empty<(int, int)>()">
                                    <div class="p-1 px-2 bg-success text-white border border-1 border-light @Step1OffspringCssClass(context.index, true)">
                                        @context.ordinal
                                    </div>
                                </Iterations>
                            </div>
                            <div class="d-flex mt-2">
                                <Iterations T="(int ordinal, int index)" Items="Offsprings?.Skip(1).FirstOrDefault()?.Nodes.Skip(1).Select((x, i) => (ordinal: x.Ordinal, index: i)) ?? Enumerable.Empty<(int, int)>()">
                                    <div class="p-1 px-2 bg-success text-white border border-1 border-light @Step1OffspringCssClass(context.index, false)">
                                        @context.ordinal
                                    </div>
                                </Iterations>
                            </div>
                        </div>
                    </div>
                }
                else if (Step == 2)
                {
                    <div class="row">
                        <div class="col-auto mb-1">
                            <div>Generation: @(CurrentGenerationIteration ?? 0)</div>
                            <div class="border border-1 pb-2 overflow-auto small">
                                <Iterations T="(EvolutionaryNodes nodes, int index)" Items="(Generations?.OrderBy(x => x.Rank) ?? Enumerable.Empty<EvolutionaryNodes>()).Select((x, i) => (nodes: x, index: i))">
                                    <div class="d-flex mt-2 px-2">
                                        <Iterations T="int" Items="context.nodes.Nodes.Skip(1).Select(x => x.Ordinal)" Context="childContext">
                                            <div class="p-1 px-2 border border-1 border-light @RankCssClass(context.nodes.Rank)">@childContext</div>
                                        </Iterations>
                                    </div>
                                </Iterations>
                            </div>
                        </div>
                    </div>
                }
                else if (Step >= 3)
                {
                    <div class="row">
                        <div class="col-auto mb-1">
                            <div>Generation: @(CurrentGenerationIteration ?? 0)</div>
                            <div class="border border-1 pb-2 overflow-auto small">
                                <Iterations T="(EvolutionaryNodes nodes, int index)" Items="(Generations?.OrderBy(x => x.Rank) ?? Enumerable.Empty<EvolutionaryNodes>()).Select((x, i) => (nodes: x, index: i))">
                                    <div class="d-flex mt-2 px-2">
                                        <Iterations T="int" Items="context.nodes.Nodes.Skip(1).Select(x => x.Ordinal)" Context="childContext">
                                            <div class="p-1 px-2 border border-1 border-light @RankCssClass(context.nodes.Rank)">@childContext</div>
                                        </Iterations>
                                    </div>
                                </Iterations>
                            </div>
                        </div>
                        @if (Step < 8)
                        {
                            <div class="col-auto mb-1">
                                <div>Mating Pool</div>
                                <div class="border border-1 pb-2 overflow-auto small">
                                    @if (MatingPool is { Count: > 0 })
                                    {
                                        <Iterations T="(EvolutionaryNodes nodes, int index)" Items="MatingPool.OrderBy(x => x.Rank).Select((x, i) => (nodes: x, index: i))">
                                            <div class="d-flex mt-2 px-2">
                                                <Iterations T="int" Items="context.nodes.Nodes.Skip(1).Select(x => x.Ordinal)" Context="childContext">
                                                    <div class="p-1 px-2 border border-1 border-light @RankCssClass(context.nodes.Rank)">@childContext</div>
                                                </Iterations>
                                            </div>
                                        </Iterations>
                                    }
                                    else
                                    {
                                        <div class="d-flex mt-2 px-2">
                                            <Iterations T="EvolutionaryNode" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1)" Context="childContext">
                                                <div class="p-1 px-2 border border-1 border-light bg-white text-white breather">&nbsp;</div>
                                            </Iterations>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @if (Step > 4 && Step < 8)
                        {
                            <div class="col-auto mb-1">
                                <div>Offsprings</div>
                                <div class="border border-1 pb-2 overflow-auto small">
                                    @if (Offsprings is { Count: > 0 })
                                    {
                                        @if (Step == 5)
                                        {
                                            <Iterations T="(EvolutionaryNodes nodes, int index)" Items="Offsprings.OrderBy(x => x.Rank).Select((x, i) => (nodes: x, index: i))">
                                                <div class="d-flex mt-2 px-2">
                                                    <Iterations T="int" Items="context.nodes.Nodes.Skip(1).Select(x => x.Ordinal)" Context="childContext">
                                                        <div class="p-1 px-2 border border-1 border-light">@childContext</div>
                                                    </Iterations>
                                                </div>
                                            </Iterations>
                                        }
                                        else
                                        {
                                            <Iterations T="(EvolutionaryNodes nodes, int index)" Items="Offsprings.OrderBy(x => x.Rank).Select((x, i) => (nodes: x, index: i))">
                                                <div class="d-flex mt-2 px-2">
                                                    <Iterations T="int" Items="context.nodes.Nodes.Skip(1).Select(x => x.Ordinal)" Context="childContext">
                                                        <div class="p-1 px-2 border border-1 border-light @RankCssClass(context.nodes.Rank)">@childContext</div>
                                                    </Iterations>
                                                </div>
                                            </Iterations>
                                        }
                                    }
                                    else
                                    {
                                        <div class="d-flex mt-2 px-2">
                                            <Iterations T="EvolutionaryNode" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1)?? Enumerable.Empty<EvolutionaryNode>()" Context="childContext">
                                                <div class="p-1 px-2 border border-1 border-light bg-white text-white breather">&nbsp;</div>
                                            </Iterations>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <div class="col-auto mb-1">
                            <div>Generation: @((CurrentGenerationIteration ?? 0) + 1)</div>
                            <div class="border border-1 pb-2 overflow-auto small">
                                <Iterations T="(EvolutionaryNodes nodes, int index)" Items="(NextGenerations?.OrderBy(x => x.Rank) ?? Enumerable.Empty<EvolutionaryNodes>()).Select((x, i) => (nodes: x, index: i))">
                                    <div class="d-flex mt-2 px-2">
                                        <Iterations T="int" Items="context.nodes.Nodes.Skip(1).Select(x => x.Ordinal)" Context="childContext">
                                            <div class="p-1 px-2 border border-1 border-light @RankCssClass(context.nodes.Rank)">@childContext</div>
                                        </Iterations>
                                    </div>
                                </Iterations>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (CycleComplete == true || Step > 0)
        {
            <div class="steps-controls row">
                <div class="col-12 mt-2">
                    @if (Step != 4 && Step < 10)
                    {
                        <button type="button" class="btn btn-sm btn-outline-info me-2" disabled="@Disabled" @onclick="() => OnNextStep.InvokeAsync((Step ?? 0) + 1)">
                            Next
                        </button>
                    }
                    else if (Step == 4)
                    {
                        <div class="position-relative pb-2">
                            <button type="button" class="spinner-container border-0 p-0 m-0 overflow-hidden" disabled="@Disabled" @onclick="() => OnSpin.InvokeAsync()">
                                <EvolutionaryPie CssClass="@(Spinning == true? "spinner spinning" :"spinner")" Value="WheelItems" />
                            </button>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-info me-2" disabled="@Disabled" @onclick="() => OnSpin.InvokeAsync()">
                            Spin
                        </button>
                    }
                    <button type="button" class="btn btn-sm btn-outline-warning" disabled="@Disabled" @onclick="() => OnReset.InvokeAsync()">
                        Reset
                    </button>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public int? Step { get; set; }
    [Parameter] public int? CurrentGenerationIteration { get; set; }
    [Parameter] public int? NumberOfBitsOffspring { get; set; }
    [Parameter] public int? NumberOfLocations { get; set; }
    [Parameter] public bool? CycleComplete { get; set; }
    [Parameter] public List<EvolutionaryNodes>? Generations { get; set; }
    [Parameter] public List<EvolutionaryNodes>? NextGenerations { get; set; }
    [Parameter] public List<EvolutionaryNodes>? MatingPool { get; set; }
    [Parameter] public List<EvolutionaryNodes>? WheelItems { get; set; }
    [Parameter] public List<EvolutionaryNodes>? Offsprings { get; set; }
    [Parameter] public bool? Spinning { get; set; }
    [Parameter] public EventCallback<int> OnNextStep { get; set; }
    [Parameter] public EventCallback OnSpin { get; set; }
    [Parameter] public EventCallback OnReset { get; set; }

    private string Step1OffspringCssClass(int index, bool top) => (Evaluation: index < NumberOfLocations - NumberOfBitsOffspring - 1, Top: top) switch
    {
        { Evaluation: true, Top: true } or { Evaluation: false, Top: false } => "bg-opacity-50",
        _ => string.Empty
    };

    private string RankCssClass(double? rank) => rank switch
    {
        0D => "bg-success text-white",
        <= 0.5D => "bg-success text-white bg-opacity-75",
        <= 0.75D => "bg-success text-dark bg-opacity-50",
        _ => "bg-success text-dark bg-opacity-25"
    };
}
