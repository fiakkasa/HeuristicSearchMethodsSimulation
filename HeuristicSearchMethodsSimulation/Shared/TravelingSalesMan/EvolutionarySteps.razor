@if (Step >= 0)
{
    <div class="traveling-salesman-evolutionary-steps-container @CssClass">
        <div class="steps-text row">
            @if (Step >= 0)
            {
                <div class="col-12 @(Step == 0 ? "text-black" : "text-muted")">
                    Step 0: Establish an appropriate encoding system.
                </div>
            }
            @if (Step >= 1)
            {
                <div class="col-12 @(Step == 1 ? "text-black" : "text-muted")">
                    Step 1: Define usable operators.
                </div>
                @if (Step == 1)
                {
                    <div class="col-12 text-muted">
                        Crossover: preserve segment from one parent and fill the missing bits based on their appearing order in the other.
                    </div>
                }
            }
            @if (Step >= 2)
            {
                <div class="col-12 @(Step == 2 || Step == 3 || Step == 4 ? "text-black" : "text-muted")">
                    Step 2: Generate initial population.
                </div>
            }
            @if (Step == 3)
            {
                <div class="col-12 text-black">
                    Elites: sort and choose the fittest solution(s) to be copied unchanged into the next generation directly.
                </div>
            }
            @if (Step == 4)
            {
                <div class="col-12 text-black">
                    Parents: probabilistically choose fit solutions to be transferred into the mating pool.
                </div>
            }
            @if (Step >= 5)
            {
                <div class="col-12 @(Step == 5 ? "text-black" : "text-muted")">
                    Step 3: Breed the new candidate solutions.
                </div>
            }
            @if (Step == 6)
            {
                <div class="col-12 @(Step == 6 ? "text-black" : "text-muted")">
                    Survivors: rank and choose the fittest solutions to complete the next generation.
                </div>
            }
            @if (Step >= 7)
            {
                <div class="col-12 @(Step == 7 ? "text-black" : "text-muted")">
                    Step 4: Construct the next generation.
                </div>
            }
        </div>
        <div class="steps row">
            @if (Step == 0 && Generations?.FirstOrDefault()?.Nodes.Count > 1)
            {
                <div class="col-12 mt-1">
                    <div class="d-flex flex-wrap">
                        <Iterations T="int" Items="Generations?.FirstOrDefault()?.Nodes.Skip(1).Select(x => x.Ordinal)">
                            <div class="p-1 text-muted">@context</div>
                        </Iterations>
                    </div>
                    @if (CycleComplete == true)
                    {
                        <div class="mt-2">
                            <button type="button" class="btn btn-sm btn-outline-info" disabled="@Disabled" @onclick="OnNextStepClick(1)">Next</button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public int? Step { get; set; }
    [Parameter] public bool? CycleComplete { get; set; }
    [Parameter] public List<EvolutionaryNodes>? Generations { get; set; }
    [Parameter] public EventCallback<int?> OnNextStep { get; set; }

    private Func<Task> OnNextStepClick(int? step = default) =>
        Disabled
            ? () => Task.FromResult(0)
            : () => OnNextStep.InvokeAsync(step);
}
