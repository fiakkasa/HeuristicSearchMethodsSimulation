@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.ConfigLib
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.GeoLib
@using Plotly.Blazor.LayoutLib.GeoLib.ProjectionLib
@using Plotly.Blazor.Traces.ScatterGeoLib
@implements IDisposable
@inject ILogger<LocationsMap> logger

<div class="traveling-salesman-map-container overflow-auto @CssClass">
    <div class="flex-shrink-0 d-flex justify-content-center">
        <PlotlyChart Config="_chartConfig"
                     Layout="_chartLayout"
                     Data="_chartData"
                     @ref="_chartRef"
                     style="min-height: 0; height: auto; transform: scale(1.25);" />
    </div>
</div>

@code {
    private PlotlyChart? _chartRef;
    private readonly Config _chartConfig = new()
    {
        Responsive = false,
        DisplayLogo = false,
        DisplayModeBar = DisplayModeBarEnum.False,
        AutoSizable = false,
        ShowTips = false
    };
    private readonly Layout _chartLayout = new()
    {
        Width = 640,
        Height = 450,
        AutoSize = false,
        ShowLegend = false,
        Margin = new()
        {
            AutoExpand = false,
            B = 0,
            L = 0,
            R = 0,
            T = 0,
            Pad = 0
        },
        DragMode = DragModeEnum.False,
        Geo = new List<Geo> {
            new Geo {
                Scope = ScopeEnum.NorthAmerica,
                Projection = new Projection
                {
                    Type = TypeEnum.AzimuthalEqualArea
                },
                ShowLand = true,
                LandColor = "#f8f4f4",
                CountryColor = "#d3d3d3"
            }
        },
    };
    private List<ITrace> _chartData = new List<ITrace> { new ScatterGeo { LocationMode = LocationModeEnum.ISO3 } };
    private string? _markerColor;
    private string? _lineColor;

    [Parameter] public string? CssClass { get; set; }
    [Parameter]
    public List<ITrace> Data
    {
        set
        {
            var collection = (
                value?.Count < 1
                    ? new List<ITrace> { new ScatterGeo { LocationMode = LocationModeEnum.ISO3 } }
                    : value!
            )
            .ConvertAll(x => ApplyLineColor(ApplyMarkerColor(x)));

            _chartData.Clear();
            _chartData.AddRange(collection!);
        }
    }
    [Parameter]
    public string LandColor
    {
        set
        {
            _chartLayout.Geo[0].LandColor = value?.Trim() is { Length: > 0 } color
                ? color
                : "#f8f4f4";
        }
    }
    [Parameter]
    public string CountryColor
    {
        set
        {
            _chartLayout.Geo[0].CountryColor = value?.Trim() is { Length: > 0 } color
                ? color
                : "#d3d3d3";
        }
    }
    [Parameter]
    public string? MarkerColor
    {
        set
        {
            _markerColor = value;

            _chartData.ForEach(x => _ = ApplyMarkerColor(x));
        }
    }
    [Parameter]
    public string? LineColor
    {
        set
        {
            _lineColor = value;

            _chartData.ForEach(x => _ = ApplyLineColor(x));
        }
    }

    private ITrace ApplyMarkerColor(ITrace obj)
    {
        if (obj is not ScatterGeo { Mode: ModeFlag.Markers } item) return obj;

        if (item.Marker is not { }) item.Marker = new();

        item.Marker.Color = _markerColor;

        return item;
    }

    private ITrace ApplyLineColor(ITrace obj)
    {
        if (obj is not ScatterGeo { Mode: ModeFlag.Lines } item) return obj;

        if (item.Line is not { }) item.Line = new();

        item.Line.Color = _lineColor;

        return item;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) return;

        try
        {
            if (_chartRef is { } m) await m!.React();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }

    public void Dispose()
    {
        _chartRef?.Dispose();
    }
}
