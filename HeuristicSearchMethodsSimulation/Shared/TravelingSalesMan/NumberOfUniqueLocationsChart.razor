@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.ConfigLib
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Plotly.Blazor.Traces.ScatterLib
@implements IDisposable
@inject ILogger<NumberOfUniqueLocationsChart> logger

<div class="traveling-salesman-unique-locations-chart-container overflow-auto @CssClass @VisibilityClass">
    <PlotlyChart Config="_chartConfig"
                 Layout="_chartLayout"
                 Data="_chartData"
                 @ref="_chartRef"
                 style="min-height: 480px" />
</div>

@code {
    private PlotlyChart? _chartRef;
    private readonly Config _chartConfig = new()
    {
        DisplayLogo = false,
        DisplayModeBar = DisplayModeBarEnum.False,
        AutoSizable = true,
        Responsive = true,
        ShowTips = false
    };
    private readonly Layout _chartLayout = new()
    {
        Height = 480,
        ShowLegend = false,
        AutoSize = true,
        Margin = new()
        {
            AutoExpand = false,
            B = 50,
            L = 50,
            R = 20,
            T = 20,
            Pad = 0
        },
        DragMode = DragModeEnum.False,
        XAxis = new List<XAxis> {
            new()
            {
                Title = new ()
                {
                    Text = "Locations"
                },
                TickVals = Array.Empty<object>(),
                TickMode = TickModeEnum.Linear
            }
        },
        YAxis = new List<YAxis> {
            new()
            {
                Title = new()
                {
                    Text = "Routes"
                }
            }
        }
    };
    private List<ITrace> _chartData = new();
    private string? _markerColor;
    private string? _lineColor;

    private string VisibilityClass =>
    _chartData.FirstOrDefault() is Scatter scatter && scatter.X?.Count > 0 && scatter.X?.Count == scatter.Y?.Count
        ? string.Empty
        : "d-none";

    [Parameter] public string? CssClass { get; set; }
    [Parameter]
    public List<long> Data
    {
        set
        {
            if (value?.Count > 0)
            {
                var data = new Scatter
                {
                    Mode = ModeFlag.Lines | ModeFlag.Markers,
                    X = value.Select((x, i) => i + 1).Cast<object>().ToList(),
                    Y = value.Cast<object>().ToList(),
                    Text = string.Empty,
                    Name = string.Empty,
                    Marker = new() { Color = _markerColor },
                    Line = new() { Color = _lineColor },
                    HoverLabel = new() { NameLength = 0 },
                    HoverTemplate = $"{_chartLayout.YAxis[0].Title.Text}: %{{y}}<br />{_chartLayout.XAxis[0].Title.Text}: %{{x}}"
                };

                _chartData.Clear();
                _chartData.Add(data);
            }
            else
            {
                _chartData.Clear();
            }
        }
    }

    [Parameter]
    public string? MarkerColor
    {
        set
        {
            _markerColor = value;

            _chartData.ForEach(x => _ = ApplyMarkerColor(x));
        }
    }
    [Parameter]
    public string? LineColor
    {
        set
        {
            _lineColor = value;

            _chartData.ForEach(x => _ = ApplyLineColor(x));
        }
    }

    private ITrace ApplyMarkerColor(ITrace obj)
    {
        if (obj is not Scatter { Mode: ModeFlag.Markers } item) return obj;

        if (item.Marker is not { }) item.Marker = new();

        item.Marker.Color = _markerColor;

        return item;
    }

    private ITrace ApplyLineColor(ITrace obj)
    {
        if (obj is not Scatter { Mode: ModeFlag.Lines } item) return obj;

        if (item.Line is not { }) item.Line = new();

        item.Line.Color = _lineColor;

        return item;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) return;

        try
        {
            if (_chartRef is { } c) await c!.React();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }

    public void Dispose()
    {
        _chartRef?.Dispose();
    }
}
