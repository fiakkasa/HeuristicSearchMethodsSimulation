@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.ConfigLib
@using Plotly.Blazor.Traces.PieLib
@inject ILogger<EvolutionaryPie> logger
@implements IDisposable

<div class="traveling-salesman-evolutionary-pie-container @CssClass @VisibilityClass">
    <PlotlyChart Config="_chartConfig"
                 Layout="_chartLayout"
                 Data="_chartData"
                 @ref="_chartRef" 
                 style="@("width:" + _chartLayout.Width + "px; height:" + _chartLayout.Height + "px;")" />
</div>

@code {
    private PlotlyChart? _chartRef;
    private readonly Config _chartConfig = new()
        {
            Responsive = false,
            DisplayLogo = false,
            DisplayModeBar = DisplayModeBarEnum.False,
            AutoSizable = false,
            ShowTips = false
        };
    private readonly Layout _chartLayout = new()
        {
            Width = 200,
            Height = 200,
            AutoSize = false,
            ShowLegend = false,
            Margin = new()
            {
                AutoExpand = false,
                B = 0,
                L = 0,
                R = 0,
                T = 0,
                Pad = 0
            },
            HoverMode = Plotly.Blazor.LayoutLib.HoverModeEnum.False
        };
    private readonly List<ITrace> _chartData = new List<ITrace> { new Pie() };

    private string VisibilityClass =>
        _chartData.FirstOrDefault() is Pie pie && pie.Values?.Count > 0 && pie.Values?.Count == pie.Labels?.Count
            ? string.Empty
            : "d-none";

    [Parameter] public string? CssClass { get; set; }
    [Parameter]
    public List<EvolutionaryNodes>? Value
    {
        set
        {
            _chartData.Clear();
            var collection = value ?? Enumerable.Empty<EvolutionaryNodes>();
            var max = collection.MaxBy(x => x.DistanceInKilometers)?.DistanceInKilometers switch
            {
                double m => m,
                _ => 1
            };
            _chartData.Add(
                new Pie
                {   
                    Text = collection.Select(x => $"[{x.Text}]<br />{x.DistanceInKilometers.ToFormattedDistance()}").ToList<object>(),
                    TextInfo = TextInfoFlag.Text | TextInfoFlag.Percent,
                    TextPosition = TextPositionEnum.Inside,
                    TextFont = new()
                    {
                        Size = 8M,
                        ColorArray = collection.Select(x => x.Rank switch
                        {
                            0D => "FFFFFF",
                            <= 0.5D => "FFFFFF",
                            <= 0.75D => "222222",
                            _ => "222222"
                        }).ToList<object>()
                    },
                    Marker = new() 
                    { 
                        Line = new()
                        {
                            Color = "FFFFFF",
                            Width = 1M
                        },
                        Colors = collection.Select(x => x.Rank switch
                        {
                            0D => "43AC6AFF",
                            <= 0.5D => "43AC6ABF",
                            <= 0.75D => "43AC6A80",
                            _ => "43AC6A40"
                        }).ToList<object>()
                    },
                    Labels = collection.Select(x => x.Text).ToList<object>(),
                    Values = collection.Select(x => (object)(double)(max / (x.DistanceInKilometers ?? max))).ToList()
                }
            );
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) return;

        try
        {
            if (_chartRef is { } c) await c!.React();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }

    public void Dispose()
    {
        _chartRef?.Dispose();
    }
}
