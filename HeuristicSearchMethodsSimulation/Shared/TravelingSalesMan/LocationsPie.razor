@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.ConfigLib
@implements IDisposable
@inject ILogger<LocationsPie> logger

<div class="traveling-salesman-map-container @CssClass @VisibilityClass">
    <div class="flex-shrink-0 d-flex justify-content-center overflow-hidden">
        <PlotlyChart Config="_chartConfig"
                     Layout="_chartLayout"
                     Data="_chartData"
                     @ref="_chartRef" style="min-height: 0; height: auto;" />
    </div>
</div>

@code {
    private PlotlyChart? _chartRef;
    private readonly Config _chartConfig = new()
    {
        Responsive = false,
        DisplayLogo = false,
        DisplayModeBar = DisplayModeBarEnum.False,
        AutoSizable = false,
        ShowTips = false,
    };
    private readonly Layout _chartLayout = new()
    {
        Width = 200,
        Height = 200,
        AutoSize = false,
        ShowLegend = false,
        Margin = new()
        {
            AutoExpand = false,
            B = 0,
            L = 0,
            R = 0,
            T = 0,
            Pad = 0
        }
    };
    private readonly List<ITrace> _chartData = new List<ITrace> { new Pie() };

    private string VisibilityClass =>
        _chartData.FirstOrDefault() is Pie pie && pie.Values?.Count > 0 && pie.Values?.Count == pie.Labels?.Count
            ? string.Empty
            : "d-none";

    [Parameter] public string? CssClass { get; set; }
    [Parameter]
    public Pie? Value
    {
        set
        {
            _chartData.Clear();
            _chartData.Add(
                value is Pie pie && pie.Values?.Count > 0 && pie.Values?.Count == pie.Labels?.Count
                    ? pie
                    : new Pie()
            );
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) return;

        try
        {
            if (_chartRef is { } c) await c!.React();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }

    public void Dispose()
    {
        _chartRef?.Dispose();
    }
}
