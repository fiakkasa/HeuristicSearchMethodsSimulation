@inject ITravelingSalesManService tsms
@inject NavigationManager nav
@using System.Text

<select class="traveling-salesman-algo-dropdown form-select form-select-sm d-inline-block w-auto @(tsms.Algorithm == TravelingSalesManAlgorithms.None ? "text-black-50" : "text-black")"
        value="@tsms.Algorithm"
        disabled="@Disabled"
        @oninput="OnValue">
    <Iterations T="KeyValuePair<string, TravelingSalesManAlgorithms>" Items="List">
        <Condition Evaluation="context.Value == TravelingSalesManAlgorithms.None && tsms.Algorithm == TravelingSalesManAlgorithms.None">
            <Match>
                <option value="@context.Value">Select search method...</option>
            </Match>
            <NotMatch>
                <option class="text-black" value="@context.Value">@context.Key</option>
            </NotMatch>
        </Condition>
    </Iterations>
</select>

@code {
    [Parameter] public bool Disabled { get; set; }

    private List<KeyValuePair<string, TravelingSalesManAlgorithms>>? _list;
    private List<KeyValuePair<string, TravelingSalesManAlgorithms>> List =>
        _list ??=
        Enum.GetValues(typeof(TravelingSalesManAlgorithms))
            .Cast<TravelingSalesManAlgorithms>()
            .Select(x =>
                KeyValuePair.Create(
                    x == TravelingSalesManAlgorithms.None
                        ? string.Empty
                        : x.ToString().Replace('_', ' '),
                    x
                )
            )
            .ToList();

    private void OnValue(ChangeEventArgs e)
    {
        if (Disabled) return;

        var selection = e.Value?.ToString() ?? ((int)TravelingSalesManAlgorithms.None).ToString();

        Enum.TryParse<TravelingSalesManAlgorithms>(selection, out var value);

        var uri = new StringBuilder(nav.BaseUri).Append("TravelingSalesMan");

        if (value != TravelingSalesManAlgorithms.None)
            uri.Append('/').Append(value.ToString().Replace("_", string.Empty));

        nav.NavigateTo(uri.ToString());
    }
}
