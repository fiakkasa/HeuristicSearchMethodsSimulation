<select class="traveling-salesman-algo-dropdown form-select form-select-sm d-inline-block w-auto"
        value="@Value"
        disabled="@Disabled"
        @oninput="OnValue">
    <Iterations T="KeyValuePair<string, TravelingSalesManAlgorithms>" Items="List">
        <option value="@context.Value">@context.Key</option>
    </Iterations>
</select>

@code {
    [Parameter] public TravelingSalesManAlgorithms Value { get; set; } = TravelingSalesManAlgorithms.None;
    [Parameter] public EventCallback<TravelingSalesManAlgorithms> ValueChanged { get; set; }
    [Parameter] public bool Disabled { get; set; }

    private List<KeyValuePair<string, TravelingSalesManAlgorithms>>? _list;
    private List<KeyValuePair<string, TravelingSalesManAlgorithms>> List =>
        _list ??
        Enum.GetValues(typeof(TravelingSalesManAlgorithms))
            .Cast<TravelingSalesManAlgorithms>()
            .Select(x =>
                KeyValuePair.Create(
                    x == TravelingSalesManAlgorithms.None
                        ? string.Empty
                        : x.ToString().Replace('_', ' '),
                    x
                )
            )
            .ToList();

    private async Task OnValue(ChangeEventArgs e)
    {
        if (Disabled) return;

        Enum.TryParse<TravelingSalesManAlgorithms>(e.Value?.ToString() ?? "0", out var value);
        Value = value;
        await ValueChanged.InvokeAsync(value).ConfigureAwait(true);
    }
}
