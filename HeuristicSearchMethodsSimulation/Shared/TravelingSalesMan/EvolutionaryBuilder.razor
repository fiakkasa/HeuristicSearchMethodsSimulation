<Condition Evaluation="Collection.HasInsufficientLocations()">
    <NotMatch>
        <div class="traveling-salesman-partial-random-builder-container d-flex @CssClass">
            <div class="d-flex flex-wrap flex-fill justify-content-center me-1">
                <Iterations T="(bool disabled, bool selected, int i, LocationGeo item)" Items="Col">
                    <button type="button"
                            class="btn btn-sm m-1 rounded-pill btn-@(context.selected ? "info" : "outline-info")"
                            disabled="@context.disabled"
                            @onclick="OnSelectionChange(context.disabled, context.item)">
                        <Condition Evaluation="context.i > 0">
                            <Match><span>@context.i - </span></Match>
                        </Condition>
                        <span>@context.item.Label</span>
                        <span>(@context.item.ShortCode)</span>
                    </button>
                </Iterations>
            </div>
        </div>
    </NotMatch>
</Condition>

@code {
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public List<LocationGeo>? Collection { get; set; }
    [Parameter] public Dictionary<Guid, LocationGeo>? Selected { get; set; }
    [Parameter] public EventCallback<LocationGeo> OnSelection { get; set; }
    private IEnumerable<(bool disabled, bool selected, int i, LocationGeo item)> Col =>
    (Collection ?? Enumerable.Empty<LocationGeo>()).Select(
        (x, i) =>
        (
            disabled: Selected?.ContainsKey(x.Id) == true || Disabled,
            selected: Selected?.ContainsKey(x.Id) == true,
            i: i,
            item: x
        )
    );

    private Func<Task> OnSelectionChange(bool disabled, LocationGeo item) =>
        disabled
            ? () => Task.FromResult(0)
            : () => OnSelection.InvokeAsync(item);
}
