<div class="slider-container">
    <div class="bubble-container">
        <div class="bubble" style="left: @BubblePosition">
            <div class="bubble-text">@Value</div>
        </div>
    </div>
    <input type="range" class="slider" min="@Min" max="@Max" step="@Step" @bind="Value" @oninput="OnValue" />
</div>

@code {
    [Parameter] public int Min { get; set; } = 0;
    [Parameter] public int Max { get; set; } = 100;
    [Parameter] public int Step { get; set; } = 1;
    [Parameter] public int Value { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }

    private Dictionary<int, string> BubbleOffsets { get; } = new();

    private string BubblePosition => BubbleOffsets.TryGetValue(Value, out var value) && value is { } ? value : "0";

    private void EnsureInputs()
    {
        if (Min < 0) Min = 0;

        if (Step < 0) Step = 1;

        if (Max < Min || Max < Step) Max = Math.Max(Min, Step);
    }

    private void GenerateBubbleOffsets()
    {
        BubbleOffsets.Clear();

        var percChunk = (double)Step / (Max - Step);
        var perc = percChunk;

        BubbleOffsets.Add(Min, $"0");
        for (int i = Min + Step; i < Max; i += Step)
        {
            BubbleOffsets.Add(i, $"calc({perc * 100d}% - calc(var(--base-width, 25px) * {perc}))");
            perc += percChunk;
        }
        BubbleOffsets.Add(Max, $"calc(100% - calc(var(--base-width, 25px)))");
    }

    protected override void OnInitialized()
    {
        EnsureInputs();
        GenerateBubbleOffsets();
    }

    protected override void OnParametersSet()
    {
        EnsureInputs();
        GenerateBubbleOffsets();
    }

    private async Task OnValue(ChangeEventArgs e)
    {
        int.TryParse(e.Value?.ToString() ?? "0", out var value);
        await ValueChanged.InvokeAsync(value).ConfigureAwait(true);
    }
}
