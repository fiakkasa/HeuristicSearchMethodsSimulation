@page "/TravelingSalesMan/Evolutionary"
@using HeuristicSearchMethodsSimulation.Shared.TravelingSalesMan
@inject ITravelingSalesManService tsms
@implements IDisposable

<ContentWithLoader Loading="tsms.IsInit" Progress="tsms.IsInit && tsms.Loading">
    <Title>
        Traveling Sales Man - Evolutionary
    </Title>
    <Content>
        <Condition Evaluation="tsms.HasLocations">
            <NotMatch>
                <div class="d-flex flex-wrap align-items-center mb-2">
                    <h4 class="m-0 me-2">No data available at the moment..</h4>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => tsms.Refresh()">Refresh?</button>
                </div>
            </NotMatch>
            <Match>
                <div class="row">
                    <div class="col-12 col-lg-6">
                        <LocationsMatrix Data="tsms.Matrix" NumberOfUniqueRoutes="tsms.NumberOfUniqueRoutes" />
                    </div>
                    <div class="col-12 mt-3 mt-lg-0 col-lg-6">
                        <div class="d-flex flex-wrap align-items-center justify-content-between">
                            <RangeSelector Min="tsms.MinSliderValue"
                                           Max="tsms.MaxSliderValue"
                                           Step="tsms.SliderStepValue"
                                           Value="tsms.SliderValue"
                                           ValueChanged="tsms.UpdateState"
                                           Disabled="tsms.Loading" />
                            <RouteSymmetry Value="tsms.RouteSymmetry" ValueChanged="tsms.SetRouteSymmetry" Disabled="tsms.Loading" />
                        </div>

                        <LocationsMap Data="tsms.MapChartData"
                                      TotalDistance="tsms.TotalDistance"
                                      CssClass="mt-3"
                                      MarkerColor="#5bc0de"
                                      LineColor="#5bc0de"
                                      LandColor="rgb(243,243,243)"
                                      CountryColor="rgb(204,204,204)" />

                        <div class="mt-3 d-flex flex-wrap align-items-center justify-content-end">
                            <AlgorithmsDropDown Disabled="tsms.Loading" />
                        </div>
                    </div>
                </div>
            </Match>
        </Condition>

    </Content>
</ContentWithLoader>

@code {
    protected override async Task OnInitializedAsync()
    {
        tsms.OnStateChange += async () => await InvokeAsync(StateHasChanged);
        await tsms.Init(TravelingSalesManAlgorithms.Evolutionary);
    }

    public void Dispose()
    {
        tsms.OnStateChange -= async () => await InvokeAsync(StateHasChanged);
    }
}
