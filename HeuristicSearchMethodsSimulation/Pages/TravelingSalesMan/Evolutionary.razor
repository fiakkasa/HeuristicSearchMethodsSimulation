@page "/TravelingSalesMan/Evolutionary"
@implements IDisposable
@inject ITravelingSalesManFoundationService tsmfs
@inject ITravelingSalesManEvolutionaryService tsms

<ContentWithLoader Loading="!tsms.IsInit" Progress="tsms.Progress">
	<Title>
		<Header Text="Evolutionary" ShowSubtitle="tsms.IsInit" />
	</Title>
	<Content>
		<Condition Evaluation="tsmfs.HasLocations">
			<NotMatch>
				<div class="d-flex flex-wrap align-items-center mb-2">
					<h4 class="m-0 me-2">No data available at the moment..</h4>
					<button type="button" class="btn btn-primary btn-sm" @onclick="() => tsms.Refresh()">Refresh?</button>
				</div>
			</NotMatch>
			<Match>
				<div class="row">
					<div class="col-12 col-lg-6">
						<LocationsMatrix Data="tsms.EvolutionaryItem?.Matrix"
										 NumberOfUniqueRoutes="tsms.EvolutionaryItem?.NumberOfUniqueRoutes"
										 Algorithm="TravelingSalesManAlgorithms.Evolutionary" />

						<ContentWithInsufficientLocationsMessage MessageCssClass="mt-2" ShowMessage="tsmfs.LocationsBySelection.HasInsufficientData()">
							<EvolutionarySteps CssClass="mt-2"
											   Disabled="tsms.Progress"
											   CurrentGenerationIteration="tsms.EvolutionaryItem?.CurrentGenerationIteration"
											   Step="tsms.EvolutionaryItem?.Step"
											   NumberOfBitsOffspring="tsms.EvolutionaryItem?.NumberOfBitsOffspring"
											   NumberOfLocations="tsmfs.LocationsBySelection.Count"
											   CycleComplete="tsms.EvolutionaryItem?.CycleComplete"
											   CurrentGeneration="tsms.EvolutionaryItem?.CurrentGeneration"
											   NextGeneration="tsms.EvolutionaryItem?.NextGeneration"
											   MatingPool="tsms.EvolutionaryItem?.MatingPool"
											   WheelItems="tsms.EvolutionaryItem?.WheelItems"
											   Offsprings="tsms.EvolutionaryItem?.Offsprings"
											   Spinning="tsms.EvolutionaryItem?.Spinning"
											   OnNextStep="tsms.SetEvolutionaryStep"
											   OnSpin="tsms.SetEvolutionarySpin"
											   OnReset="tsms.ResetEvolutionary" 
											   OnViewEvolutionaryNodes="tsms.ViewEvolutionaryNodes" />
						</ContentWithInsufficientLocationsMessage>
					</div>
					<div class="col-12 mt-3 mt-lg-0 col-lg-6">
						<div class="d-flex flex-wrap align-items-center justify-content-between">
							<RangeSelector Min="tsmfs.MinSliderValue"
										   Max="tsmfs.MaxSliderValue"
										   Step="tsmfs.SliderStepValue"
										   Value="tsmfs.SliderValue"
										   ValueChanged="tsms.UpdateState"
										   Disabled="tsms.Progress" />
							<RouteSymmetry Value="tsmfs.RouteSymmetry" />
						</div>

						<LocationsMap Data="tsms.EvolutionaryItem?.MapChartData"
									  Disabled="tsms.Progress || tsms.EvolutionaryItem?.CycleComplete == true"
									  TotalDistance="tsms.EvolutionaryItem?.DistanceInKilometers"
									  Text="@tsms.EvolutionaryItem?.Text"
									  CssClass="mt-3"
									  MarkerColor="@tsmfs.MapOptions.MarkerColor"
									  MarkerSymbol="tsmfs.MapOptions.MarkerSymbol"
									  LineColor="@tsmfs.MapOptions.LineColor"
									  LineWidth="tsmfs.MapOptions.LineWidth"
									  LandColor="@tsmfs.MapOptions.LandColor"
									  CountryColor="@tsmfs.MapOptions.CountryColor"
									  OnMarkerClicked="tsms.SetEvolutionaryLocation" />

						<EvolutionaryBuilder CssClass="mt-3"
											 Disabled="tsms.Progress"
											 EnableBuilders="tsms.EnableBuilders"
											 CycleComplete="tsms.EvolutionaryItem?.CycleComplete"
											 Selected="tsms.EvolutionaryItem?.Visited"
											 Collection="tsms.EvolutionaryItem?.Nodes"
											 OnSelection="tsms.SetEvolutionaryLocation"
											 OnReset="tsms.ResetEvolutionary"/>

						<div class="mt-3 d-flex flex-wrap align-items-center justify-content-end">
							<AlgorithmsDropDown Disabled="tsms.Progress" />
						</div>
					</div>
				</div>
			</Match>
		</Condition>
	</Content>
</ContentWithLoader>

@code {
	protected override async Task OnInitializedAsync()
	{
		tsms.OnStateChange += async () => await InvokeAsync(StateHasChanged);
		await tsms.Init(TravelingSalesManAlgorithms.Evolutionary);
	}

	public void Dispose()
	{
		tsms.OnStateChange -= async () => await InvokeAsync(StateHasChanged);
	}
}
