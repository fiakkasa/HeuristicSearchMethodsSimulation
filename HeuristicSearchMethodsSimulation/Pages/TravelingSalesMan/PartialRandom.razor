@page "/TravelingSalesMan/PartialRandom"
@implements IDisposable

<ContentWithLoader Loading="!tsms.IsInit" Progress="tsms.Progress">
	<Title>
		<Header AlgorithmName="Partial Random" ShowSubtitle="tsms.IsInit" />
	</Title>
	<Content>
		<Condition Evaluation="tsms.HasLocations">
			<NotMatch>
				<div class="d-flex flex-wrap align-items-center mb-2">
					<h4 class="m-0 me-2">No data available at the moment..</h4>
					<button type="button" class="btn btn-primary btn-sm" @onclick="() => tsms.Refresh()">Refresh?</button>
				</div>
			</NotMatch>
			<Match>
				<div class="row">
					<div class="col-12 col-lg-6">
						<LocationsMatrix Data="tsms.PartialRandomItem?.Matrix"
										 NumberOfUniqueRoutes="tsms.PartialRandomItem?.NumberOfUniqueRoutes" />

						<ContentWithInsufficientLocationsMessage MessageCssClass="mt-2" ShowMessage="tsms.LocationsBySelection.HasInsufficientData()">
							<PartialRandomTable CssClass="mt-2"
												Collection="tsms.PartialRandomItem?.Iterations"
												SelectedId="tsms.PartialRandomItem?.SelectedIteration?.Id"
												Loading="tsms.Progress"
												Disabled="tsms.Progress"
												OnSelection="tsms.SetPartialRandomItem" />
						</ContentWithInsufficientLocationsMessage>
					</div>
					<div class="col-12 mt-3 mt-lg-0 col-lg-6">
						<div class="d-flex flex-wrap align-items-center justify-content-between">
							<RangeSelector Min="tsms.MinSliderValue"
										   Max="tsms.MaxSliderValue"
										   Step="tsms.SliderStepValue"
										   Value="tsms.SliderValue"
										   ValueChanged="tsms.UpdateState"
										   Disabled="tsms.Progress" />
							<RouteSymmetry Value="tsms.RouteSymmetry" />
						</div>

						<Condition Evaluation="tsms.PartialRandomItem?.SelectedIteration is {}">
							<Match>
								<LocationsMap Data="tsms.PartialRandomItem?.MapChartData"
											  Disabled="tsms.Progress"
											  TotalDistance="tsms.PartialRandomItem?.SelectedIteration?.DistanceInKilometers"
											  CssClass="mt-3"
											  MarkerColor="@tsms.MapOptions.MarkerColor"
											  MarkerSymbol="tsms.MapOptions.MarkerSymbol"
											  LineColor="@tsms.MapOptions.LineColor"
											  LineWidth="tsms.MapOptions.LineWidth"
											  LandColor="@tsms.MapOptions.LandColor"
											  CountryColor="@tsms.MapOptions.CountryColor" />
							</Match>
							<NotMatch>
								<LocationsMap Data="tsms.PartialRandomItem?.Builder?.MapChartData ?? tsms.PartialRandomItem?.MapChartData"
											  Disabled="tsms.Progress"
											  TotalDistance="tsms.PartialRandomItem?.Builder?.DistanceInKilometers"
											  Text="@tsms.PartialRandomItem?.Builder?.Text"
											  CssClass="mt-3"
											  MarkerColor="@tsms.MapOptions.MarkerColor"
											  MarkerSymbol="tsms.MapOptions.MarkerSymbol"
											  LineColor="@tsms.MapOptions.LineColor"
											  LineWidth="tsms.MapOptions.LineWidth"
											  LandColor="@tsms.MapOptions.LandColor"
											  CountryColor="@tsms.MapOptions.CountryColor"
											  OnMarkerClicked="tsms.SetPartialRandomLocation" />
							</NotMatch>
						</Condition>


						<PartialRandomBuilder CssClass="mt-3"
											  Disabled="tsms.Progress"
											  Collection="tsms.LocationsBySelection"
											  Selected="tsms.PartialRandomItem?.Builder?.Collection"
											  OnSelection="tsms.SetPartialRandomLocation"
											  OnReset="tsms.ClearPartialRandomBuilder" />

						<div class="mt-3 d-flex flex-wrap align-items-center justify-content-end">
							<AlgorithmsDropDown Disabled="tsms.Progress" />
						</div>
					</div>
				</div>
			</Match>
		</Condition>
	</Content>
</ContentWithLoader>

@code {
	protected override async Task OnInitializedAsync()
	{
		tsms.OnStateChange += async () => await InvokeAsync(StateHasChanged);
		await tsms.Init(TravelingSalesManAlgorithms.Partial_Random);
	}

	public void Dispose()
	{
		tsms.OnStateChange -= async () => await InvokeAsync(StateHasChanged);
	}
}
