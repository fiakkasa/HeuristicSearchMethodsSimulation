@page "/TravelingSalesMan/GuidedDirect"
@implements IDisposable

<ContentWithLoader Loading="!tsms.IsInit" Progress="tsms.Progress">
    <Title>
        <Header AlgorithmName="Guided Direct" ShowSubtitle="tsms.IsInit" />
    </Title>
    <Content>
        <Condition Evaluation="tsms.HasLocations">
            <NotMatch>
                <div class="d-flex flex-wrap align-items-center mb-2">
                    <h4 class="m-0 me-2">No data available at the moment..</h4>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => tsms.Refresh()">Refresh?</button>
                </div>
            </NotMatch>
            <Match>
                <div class="row">
                    <div class="col-12 col-lg-6">
                        <LocationsMatrix Data="tsms.GuidedDirectItem?.Current?.Matrix ?? tsms.GuidedDirectItem?.Matrix"
                                         NumberOfUniqueRoutes="tsms.GuidedDirectItem?.NumberOfUniqueRoutes" />

                        <ContentWithInsufficientLocationsMessage MessageCssClass="mt-2" ShowMessage="tsms.LocationsBySelection.HasInsufficientLocations()">
                            <Condition Evaluation="tsms.GuidedDirectItem?.AllowRuleToggle == true">
                                <Match>
                                    <div class="traveling-salesman-rule-toggle-container d-flex flex-wrap justify-content-center mt-2">
                                        <button type="button" 
                                                class="btn btn-sm mx-1 mt-1 @(tsms.GuidedDirectItem?.Rule == 1 ? "btn-primary disabled" : "btn-outline-primary")" 
                                                @onclick="() => tsms.SetGuidedDirectRule(1)">
                                            @(tsms.GuidedDirectItem?.HeadToClosestCity.Text ?? "Rule 1")
                                        </button>
                                        <button type="button" 
                                                class="btn btn-sm mx-1 mt-1 @(tsms.GuidedDirectItem?.Rule == 2 ? "btn-primary disabled" : "btn-outline-primary")" 
                                                @onclick="() => tsms.SetGuidedDirectRule(2)">
                                            @(tsms.GuidedDirectItem?.Peripheral.Text ?? "Rule 2")
                                        </button>
                                    </div>
                                </Match>
                            </Condition>

                            <GuidedDirectTable CssClass="mt-2"
                                               Collection="tsms.GuidedDirectItem?.Log"
                                               MapOptions="tsms.MapOptions"
                                               Report="tsms.History"
                                               MaxLocations="tsms.MaxSliderValue" />
                        </ContentWithInsufficientLocationsMessage>
                    </div>
                    <div class="col-12 mt-3 mt-lg-0 col-lg-6">
                        <div class="d-flex flex-wrap align-items-center justify-content-between">
                            <RangeSelector Min="tsms.MinSliderValue"
                                           Max="tsms.MaxSliderValue"
                                           Step="tsms.SliderStepValue"
                                           Value="tsms.SliderValue"
                                           ValueChanged="tsms.UpdateState"
                                           Disabled="tsms.Progress" />
                            <RouteSymmetry Value="tsms.RouteSymmetry" />
                        </div>

                        <LocationsMap Data="tsms.GuidedDirectItem?.Current?.MapChartData ?? tsms.GuidedDirectItem?.MapChartData"
                                      Disabled="tsms.Progress || tsms.GuidedDirectItem?.Completed == true"
                                      TotalDistance="tsms.GuidedDirectItem?.Current?.DistanceInKilometers"
                                      Text="@tsms.GuidedDirectItem?.Current?.Text"
                                      CssClass="mt-3"
                                      MarkerColor="@tsms.MapOptions.MarkerColor"
                                      MarkerSymbol="tsms.MapOptions.MarkerSymbol"
                                      LineColor="@tsms.MapOptions.LineColor"
                                      LineWidth="@tsms.MapOptions.LineWidth"
                                      LandColor="@tsms.MapOptions.LandColor"
                                      CountryColor="@tsms.MapOptions.CountryColor" 
                                      OnMarkerClicked="tsms.SetGuidedDirectSelection" />

                        <GuidedDirectBuilder CssClass="mt-3"
                                             Disabled="tsms.Progress"
                                             Selected="tsms.GuidedDirectItem?.Visited"
                                             Collection="tsms.LocationsBySelection"
                                             OnSelection="tsms.SetGuidedDirectSelection"
                                             OnReset="tsms.ResetGuidedDirect" />

                        <div class="mt-3 d-flex flex-wrap align-items-center justify-content-end">
                            <AlgorithmsDropDown Disabled="tsms.Progress" />
                        </div>
                    </div>
                </div>
            </Match>
        </Condition>
    </Content>
</ContentWithLoader>

@code {
    protected override async Task OnInitializedAsync()
    {
        tsms.OnStateChange += async () => await InvokeAsync(StateHasChanged);
        await tsms.Init(TravelingSalesManAlgorithms.Guided_Direct);
    }

    public void Dispose()
    {
        tsms.OnStateChange -= async () => await InvokeAsync(StateHasChanged);
    }
}
