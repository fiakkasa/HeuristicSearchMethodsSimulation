@page "/TravelingSalesMan"
@implements IDisposable

<h3>Traveling Sales Man</h3>

<Condition Evaluation="_loading">
    <Match>
        <h4 class="d-flex align-items-center">
            <strong class="text-muted">Loading...</strong>
            <span class="flex-fill"></span>
            <i class="spinner-border border-2 text-secondary" role="status" aria-hidden="true"></i>
        </h4>
    </Match>
    <NotMatch>
        <RangeSelector Min="_minSliderValue" Max="_maxSliderValue" Step="1" Value="_sliderValue" ValueChanged="UpdateElements" />

        <br />

        <div class="flex-shrink-0 d-flex justify-content-center overflow-hidden">
            <PlotlyChart Config="_chartConfig" Layout="_chartLayout" Data="_chartData" @ref="_chartRef" style="min-height: none; height: auto;" />
        </div>

        <br />

        <div class="table-responsive">
            <table class="table table-striped table-borderless">
                <thead>
                    <tr>
                        <th>@nameof(Location.Label)</th>
                        <th>@nameof(Location.ShortCode)</th>
                        <th>@nameof(Location.Latitude)</th>
                        <th>@nameof(Location.Longitude)</th>
                    </tr>
                </thead>
                <tbody>
                    <Iterations T="Location" Items="LocationsBySelection">
                        <tr>
                            <td>@context.Label</td>
                            <td>@context.ShortCode</td>
                            <td>@context.Latitude</td>
                            <td>@context.Longitude</td>
                        </tr>
                    </Iterations>
                </tbody>
            </table>
        </div>
    </NotMatch>
</Condition>



@code {
    private bool _loading { get; set; } = true;

    private List<Location> _locations { get; set; } = new();

    private int _minSliderValue = 0;
    private int _maxSliderValue = 0;
    private int _sliderValue = 0;

    private PlotlyChart? _chartRef;
    private readonly Config _chartConfig = new()
    {
        Responsive = false,
        DisplayLogo = false,
        DisplayModeBar = DisplayModeBarEnum.False,
        AutoSizable = false,
        ShowTips = false,
    };
    private readonly Layout _chartLayout = new()
    {
        Width = 400,
        Height = 200,
        AutoSize = false,
        ShowLegend = false,
        Margin = new()
        {
            AutoExpand = false,
            B = 0,
            L = 0,
            R = 0,
            T = 0,
            Pad = 0
        }
    };
    private readonly List<ITrace> _chartData = new List<ITrace> { new Pie() };

    private IEnumerable<Location> LocationsBySelection => _locations.Take(_sliderValue);

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        //await Task.Delay(2000);

        _locations = new List<Location> {
            new()
            {
                Id = Guid.NewGuid(),
                Label = "New York",
                ShortCode = "NYC",
                Latitude = 40.730610,
                Longitude = -73.935242,
                Ordinal = 1
            },
            new()
            {
                Id = Guid.NewGuid(),
                Label = "Atlanta",
                ShortCode = "ATL",
                Latitude = 33.753746,
                Longitude = -84.386330,
                Ordinal = 2
            },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Chicago",
                 ShortCode = "CHI",
                 Latitude = 41.881832,
                 Longitude = -87.623177,
                 Ordinal = 3
             },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Dallas",
                 ShortCode = "DAL",
                 Latitude = 32.779167,
                 Longitude = -96.808891,
                 Ordinal = 4
             },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Las Vegas",
                 ShortCode = "LVG",
                 Latitude = 36.114647,
                 Longitude = -115.172813,
                 Ordinal = 5
             },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Miami",
                 ShortCode = "MIA",
                 Latitude = 36.881817,
                 Longitude = -94.871750,
                 Ordinal = 6
             },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Richmond",
                 ShortCode = "RMD",
                 Latitude = 37.935757,
                 Longitude = -122.347748,
                 Ordinal = 7
             },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Salt Lake City",
                 ShortCode = "SLC",
                 Latitude = 40.758701,
                 Longitude = -111.876183,
                 Ordinal = 8
             },
             new()
             {
                 Id = Guid.NewGuid(),
                 Label = "Tulsa",
                 ShortCode = "TUL",
                 Latitude = 36.153980,
                 Longitude = -95.992775,
                 Ordinal = 9
             }
        };

        _minSliderValue = _locations.Count > 0 ? 1 : 0;
        _maxSliderValue = _locations.Count;
        await UpdateElements(_minSliderValue);

        _loading = false;
        StateHasChanged();
    }

    private async Task UpdateElements(int sliderValue)
    {
        _sliderValue = sliderValue;
        _chartData[0] =
            new Pie
            {
                Values = await LocationsBySelection.Select((_, index) => (index + 1) * 10).Cast<object>().ToAsyncEnumerable().ToListAsync(),
                Labels = await LocationsBySelection.Select(x => x.Label).Cast<object>().ToAsyncEnumerable().ToListAsync()
            };

        if (_chartRef is { } c)
            await Task.Run(() => c?.React());
    }

    public void Dispose()
    {
        _chartRef?.Dispose();
    }
}
